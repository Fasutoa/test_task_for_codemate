<?php

namespace App\Services;

use App\Models\Balance;
use App\Models\Transaction;
use App\Models\User;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\ValidationException;

class BalanceService
{
    /**
     * Пополнение баланса пользователя
     */
    public function deposit(array $data)
    {
        return DB::transaction(function () use ($data) {

            $user = User::find($data['user_id']);
            if (!$user) {
                $user = new User;
                $user->id = $data['user_id'];
                $user->name = 'AutoUser_' . $data['user_id'];
                $user->email = 'auto_' . $data['user_id'] . '@example.com';
                $user->password = bcrypt('autogenerated');
                $user->is_system_created = true;
                $user->save();
            }

            $balance = Balance::firstOrCreate(
                ['user_id' => $user->id],
                ['balance' => 0.00]
            );

            $balance->balance += $data['amount'];
            $balance->save();

            Transaction::create([
                'user_id' => $user->id,
                'type' => 'deposit',
                'amount' => $data['amount'],
                'comment' => $data['comment'] ?? null,
            ]);

            return $balance;
        });
    }

    /**
     * Снятие средств с баланса
     */
    public function withdraw(array $data)
    {
        return DB::transaction(function () use ($data) {
            $balance = Balance::where('user_id', $data['user_id'])->first();

            if (!$balance) {
                throw ValidationException::withMessages([
                    'user_id' => 'Balance not found for this user',
                ]);
            }

            if ($balance->balance < $data['amount']) {
                throw new \Exception('Insufficient funds', 409);
            }

            $balance->balance -= $data['amount'];
            $balance->save();

            Transaction::create([
                'user_id' => $data['user_id'],
                'type' => 'withdraw',
                'amount' => $data['amount'],
                'comment' => $data['comment'] ?? null,
            ]);

            return $balance;
        });
    }

    /**
     * Перевод средств между пользователями
     */
    public function transfer(array $data)
    {
        return DB::transaction(function () use ($data) {

            $fromBalance = Balance::where('user_id', $data['from_user_id'])->first();
            $toUser = User::find($data['to_user_id']);

            if (!$toUser) {
                $toUser = new User;
                $toUser->id = $data['to_user_id'];
                $toUser->name = 'AutoUser_' . $data['to_user_id'];
                $toUser->email = 'auto_user_' . $data['to_user_id'] . '@example.com';
                $toUser->password = bcrypt('autogenerated_' . $data['to_user_id']);
                $toUser->is_system_created = true;
                $toUser->save();
            }

            $toBalance = Balance::firstOrCreate(
                ['user_id' => $toUser->id],
                ['balance' => 0.00]
            );

            if (!$fromBalance) {
                throw ValidationException::withMessages([
                    'from_user_id' => 'Balance not found for sender',
                ]);
            }

            if ($fromBalance->balance < $data['amount']) {
                throw new \Exception('Insufficient funds', 409);
            }

            $fromBalance->balance -= $data['amount'];
            $fromBalance->save();

            $toBalance->balance += $data['amount'];
            $toBalance->save();

            Transaction::create([
                'user_id' => $data['from_user_id'],
                'type' => 'transfer_out',
                'amount' => $data['amount'],
                'comment' => $data['comment'] ?? null,
                'related_user_id' => $toUser->id,
            ]);

            Transaction::create([
                'user_id' => $toUser->id,
                'type' => 'transfer_in',
                'amount' => $data['amount'],
                'comment' => $data['comment'] ?? null,
                'related_user_id' => $data['from_user_id'],
            ]);

            return true;
        });
    }

    /**
     * Получение баланса пользователя
     */
    public function getBalance($userId)
    {
        $balance = Balance::where('user_id', $userId)->first();
        return $balance ? $balance->balance : 0.00;
    }
}
